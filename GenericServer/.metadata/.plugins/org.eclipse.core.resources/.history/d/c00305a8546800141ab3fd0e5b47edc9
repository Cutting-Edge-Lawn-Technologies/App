/**
 * 
 */
package server;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

/**
 * @author Aaron
 *
 */
public class InfoServer implements Runnable {
	private Connection conn = null;
	private Statement st = null;
	private PreparedStatement pst0 = null;
	private PreparedStatement pst1 = null;
	private PreparedStatement pst2 = null;
	private ResultSet rs0 = null;
	private ResultSet rs1 = null;
	private ResultSet rs2 = null;
	private int userID;
	private Socket sock;
	private int screen = 0;
	//commands
    private final String SVRCMD = "#@!?Server:";
    private final String PAGECMD = "GOTOSCREEN:";
    private final String GETFEEDS = "GETFEED";
    private final String CLIENTCMD = "#@!?Client:";
	/**
	 * 0 = Home screen
	 * 1 = Contacts Search Screen
	 * 2 = Staff Page
	 * 3 = Job Search
	 * 4 = Inbox
	 * 5 = Job Page
	 * 6 = Ticket page
	 * 7 = Employee Page
	 * 8 = Contacts Screen
	 */
	//server commands start with "#@!?Server:"
	private InputStream is;
	private OutputStream os;
	private BufferedReader br;
	
	public InfoServer(int USR_ID, Socket SOCKET){
		userID = USR_ID;
		sock = SOCKET;
		connect();
		
	}
	
	private void connect(){
		try{
			//connect to database
			conn = DriverManager.getConnection("jdbc:ucanaccess://serverDB.accdb");
			//test connection?
			st = conn.createStatement();
		}
		catch (Exception e){
			e.printStackTrace();
			System.exit(1);
		}
		
		
	}
	
	@Override
	public void run() {
		System.out.println("running");
		try {
			is = sock.getInputStream();
			os = sock.getOutputStream();
			InputStreamReader isr = new InputStreamReader(is);
			PrintWriter pw = new PrintWriter(os);
			br = new BufferedReader(isr);
			String message ="";
			while((message = br.readLine())!= null){ //While more to read
				System.out.println("loop");
				if(message.startsWith(SVRCMD)){ //if it is a server command
					try{
						//put server command code here
						String serverMessage = message.replace(SVRCMD, "").trim();
						if(serverMessage.startsWith(PAGECMD)){
							screen = Integer.parseInt(serverMessage.replace(PAGECMD, "").trim());
						}
						if(serverMessage.contentEquals(GETFEEDS)){
							String sendback =" ";
							sendback = CLIENTCMD + getFeed();
							pw.println(sendback);
							pw.flush();
						}
						
					}
					catch(NumberFormatException nfe){
						//then it wasn't an page command, maybe more elegant way of doing this
					}
				}
				else{
					System.out.println("error");
				}
			}
		}
		catch (Exception e){
			e.printStackTrace();
		}
	}

	private String getFeed() {
		// TODO Auto-generated method stub
		String feed="";
		switch(screen){
		case 0://i lied not home screen
			break;
		case 1:
			try{
				String sql="select * from jobs_tbl where  userIDs=?";// SQL code for jobs
				pst0 = conn.prepareStatement(sql);//sql command for jobs
				pst0.setInt(1,userID);//sql cmd pass the statement the user ID as a filter
				rs0 = pst0.executeQuery();//sql cmd rs0 is jobs for that user
				
				int i = 0;//itterator for how many companies they serve
				ArrayList<Integer> companiesID = new ArrayList<Integer>(0);//Array list of the companiesID so can itterate thru them later in code
				ArrayList<String> companiesName = new ArrayList<String>(0);
				sql = "select * from tickets_tbl where company =?";//more sql code but for tickets
				while(rs0.next()){//while querry has another job...
					feed+="header."+rs0.getString(3)+"~%";//get CompanyID and CompanyName
					companiesID.add(rs0.getInt(1));//add which company it is
					companiesName.add(rs0.getString(3));
					if(i!=0)
						sql+=" or company =?";//if ! first then add more "or companies" to list
					i++;
				}
				pst1 = conn.prepareStatement(sql);//more sql cmds..pst0 is tickets now
				i = 1;//start at 1 because SQL is weird and starts at 1 not 0
				for(int j:companiesID){//for each company...
					pst1.setInt(i , j);//set each "or company" criteria to a company
					i++;
				}
				rs1 = pst1.executeQuery();//run query of tickets...rs0 is tickets now
				while(rs1.next()){//while ticket query has more records
					sql = "select firstname, lastname from employees_tbl where employeeID =?";//sql cmd to pull up the employees name
					pst2 = conn.prepareStatement(sql);
					pst2.setInt(1, rs1.getInt(3));//set employee ID form rs1 record to first filter
					rs2 = pst2.executeQuery();
					rs2.next();
					String employeeName = rs2.getString(1)+" "+rs2.getString(2);
					/**
					 * the following two areas do the exact same thing but I'm not sure which will be more efficient...will test
					 * 
					 * Have tested and the first one is somewhere between 2x - 5x faster with 4 records //results might not be right on this test
					 * 													  10x - infinitely faster with 2 records
					 * 													  4x - infinitely faster with 8 records
					*/
					//area 1
					//use old look up and search it here
					//System.out.println("idea 1");
					//long startTime = System.currentTimeMillis();//start time
					String companyName = binarySearch(rs1.getInt(2),companiesID, companiesName);
					//System.out.println(System.currentTimeMillis()-startTime);
					//end area 1
					/** //area 2
					System.out.println("idea 2");
					startTime = System.currentTimeMillis();//start time
					sql="select Company from jobs_tbl where  companyID=?";// SQL code for jobs
					pst2 = conn.prepareStatement(sql);//sql command for jobs
					pst2.setInt(1,rs1.getInt(2));//sql cmd pass the statement the user ID as a filter
					rs2 = pst2.executeQuery();//sql cmd rs0 is jobs for that user
					rs2.next();
					companyName = rs2.getString(1);
					System.out.println(System.currentTimeMillis()-startTime);
					//end area 2
					*/ //see above: to be deleted after all parties have accepted first method is faster
					feed+= "child."+companyName+"~"+employeeName+"~"+rs1.getDate(4)+"~"+rs1.getTime(4)+"~~";
				}
			}
			catch(SQLException e){
				e.printStackTrace();
			}
			break;
		case 2:
			break;
		case 3:
			break;
		case 4:
			break;
		case 5:
			break;
		case 6:
			break;
		case 7:
			break;
		case 8: 
			break;
		default:
			break;
		}
		System.out.println(feed);
		return feed;
	}
	
	
	private String binarySearch(int value, ArrayList<Integer> id, ArrayList<String> name){
		ArrayList<Integer> idClone = (ArrayList<Integer>) id.clone();//clone so don't change the reference Array
		ArrayList<String> nameClone = (ArrayList<String>) name.clone();//clone so don't change the reference Array
		
		int halfway = idClone.size()/2;//binary Search
		
		if( value == idClone.get(halfway)){//if it found it
			return nameClone.get(halfway);//return it
		}
		/**
		 * Side note: if you don't have it remove the halfway point it enters an infinite recursive loop and spits out a empty string
		 */
		else if(value <= idClone.get(halfway)){//if it is less than what halfway is
			//then for everything above or equal to halfway...remove it
			for(int i = halfway; i<=idClone.size()-1;i++){
				idClone.remove(halfway);
				nameClone.remove(halfway);
				return binarySearch(value, idClone,nameClone); //Recursion
			}
		}
		
		else{//else it is over halfway
			for(int i = 0; i <= halfway;i++){//and remove everything under or equal to the halfway mark
				idClone.remove(0);
				nameClone.remove(0);
				return binarySearch(value, idClone,nameClone);
			}
		}
		//never gets here, but eclipse is dumb and doesn't realize that it can't reach here
		return "";
	}

}
