/**
 * 
 */
package server;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

/**
 * @author Aaron
 *
 */
public class InfoServer implements Runnable {
	private Connection conn = null;
	private Statement st = null;
	private PreparedStatement pst = null;
	private ResultSet rs = null;
	private int userID;
	private Socket sock;
	private int screen = 0;
	//commands
    private final String SVRCMD = "#@!?Server:";
    private final String PAGECMD = "GOTOSCREEN:";
    private final String GETFEEDS = "GETFEED";
    private final String CLIENTCMD = "#@!?Client:";
	/**
	 * 0 = Home screen
	 * 1 = Contacts Search Screen
	 * 2 = Staff Page
	 * 3 = Job Search
	 * 4 = Inbox
	 * 5 = Job Page
	 * 6 = Ticket page
	 * 7 = Employee Page
	 * 8 = Contacts Screen
	 */
	//server commands start with "#@!?Server:"
	private InputStream is;
	private OutputStream os;
	private BufferedReader br;
	
	public InfoServer(int USR_ID, Socket SOCKET){
		userID = USR_ID;
		sock = SOCKET;
		connect();
		
	}
	
	private void connect(){
		try{
			//connect to database
			conn = DriverManager.getConnection("jdbc:ucanaccess://serverDB.accdb");
			//test connection?
			st = conn.createStatement();
		}
		catch (Exception e){
			e.printStackTrace();
			System.exit(1);
		}
		
		
	}
	
	@Override
	public void run() {
		System.out.println("running");
		try {
			is = sock.getInputStream();
			os = sock.getOutputStream();
			InputStreamReader isr = new InputStreamReader(is);
			PrintWriter pw = new PrintWriter(os);
			br = new BufferedReader(isr);
			String message ="";
			while((message = br.readLine())!= null){ //While more to read
				System.out.println("loop");
				if(message.startsWith(SVRCMD)){ //if it is a server command
					try{
						//put server command code here
						String serverMessage = message.replace(SVRCMD, "").trim();
						if(serverMessage.startsWith(PAGECMD)){
							screen = Integer.parseInt(serverMessage.replace(PAGECMD, "").trim());
						}
						if(serverMessage.contentEquals(GETFEEDS)){
							String sendback =" ";
							sendback = CLIENTCMD + getFeed();
							pw.println(sendback);
							pw.flush();
						}
						
					}
					catch(NumberFormatException nfe){
						//then it wasn't an page command, maybe more elegant way of doing this
					}
				}
				else{
					System.out.println("error");
				}
			}
		}
		catch (Exception e){
			e.printStackTrace();
		}
	}

	private String getFeed() {
		// TODO Auto-generated method stub
		String feed="";
		switch(screen){
		case 0://i lied not home screen
			break;
		case 1:
			try{
				String sql="select * from jobs_tbl where  userIDs=?";// SQL code
				pst = conn.prepareStatement(sql);//sql command
				pst.setInt(1,userID);//sql cmd
				rs = pst.executeQuery();//sql cmd
				
				int i = 0;//itterator for how many companies they server
				ArrayList<Integer> companies = new ArrayList<Integer>(0);//Array list of the companies so flexable
				sql = "select * from tickets_tbl where company =?";//more sql code
				while(rs.next()){//while querry has another record...
					feed+=rs.getString(1)+"."+rs.getString(3)+"\n";//get ID and Company
					companies.add(Integer.parseInt(rs.getString(1)));//add which company it is
					sql+=" or company =?";//if ! first then add more "or companies" to list
					i++;
				}
				pst = conn.prepareStatement(sql);//more sql cmds
				i = 1;
				for(int j:companies){//for each company
					pst.setInt(i , j);//set each "or company" criteria to a company
					i++;
				}
				rs = pst.executeQuery();//run query
				while(rs.next()){//while query has moar records
					//feed the feed
					feed += rs.getString(1)+"."+rs.getString(2)+"."+rs.getString(3)+"."+rs.getString(4)+"\n";
				}
			}
			catch(SQLException e){
				e.printStackTrace();
			}
			break;
		case 2:
			break;
		case 3:
			break;
		case 4:
			break;
		case 5:
			break;
		case 6:
			break;
		case 7:
			break;
		case 8: 
			break;
		default:
			break;
		}
		System.out.println(feed);
		return feed;
	}

}
